<?php

/**
 * Product
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Magazin
 * @subpackage model
 * @author     Belfegor
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Product extends BaseProduct {

    public function getNameForParent() {
        $name = "(" . $this->getCode() . ") ";
        return $name . $this->getName();
    }

    public function save(Doctrine_Connection $conn = null) {
        $backtracer = debug_backtrace();
        if (is_array($backtracer) and !is_null($backtracer) and $this->isNew()) {
            if (!is_callable("escape")) {

                function escape($value) {
                    if (!is_string($value)) {
                        return $value;
                    }

                    return htmlspecialchars($value, ENT_QUOTES, 'UTF-8');
                }

            }

            if (!is_callable("formatArgs")) {

                function formatArgs($args, $single = false, $format = 'html') {
                    $result = array();

                    $single and $args = array($args);

                    foreach ($args as $key => $value) {
                        if (is_object($value)) {
                            $formattedValue = ($format == 'html' ? '<em>object</em>' : 'object') . sprintf("('%s')", get_class($value));
                        } else if (is_array($value)) {
                            $formattedValue = ($format == 'html' ? '<em>array</em>' : 'array') . sprintf("(%s)", formatArgs($value));
                        } else if (is_string($value)) {
                            $formattedValue = ($format == 'html' ? sprintf("'%s'", escape($value)) : "'$value'");
                        } else if (null === $value) {
                            $formattedValue = ($format == 'html' ? '<em>null</em>' : 'null');
                        } else {
                            $formattedValue = $value;
                        }

                        $result[] = is_int($key) ? $formattedValue : sprintf("'%s' => %s", escape($key), $formattedValue);
                    }
//print_r($result);
                    foreach ($result as $res) {
//$rr.=", ".$res;
                    }
                    //return $rr;
                }

            }

            if (!is_callable("formatFile")) {

                function formatFile($file, $line, $format = 'html', $text = null) {
                    if (null === $text) {
                        $text = $file;
                    }

                    if ('html' == $format && $file && $line && $linkFormat = ini_get('xdebug.file_link_format')) {
                        $link = strtr($linkFormat, array('%f' => $file, '%l' => $line));
                        $text = sprintf('<a href="%s" title="Click to open this file" class="file_link">%s</a>', $link, $text);
                    }

                    return $text;
                }

            }
            if (!is_callable("fileExcerpt")) {

                function fileExcerpt($file, $line) {
                    if (is_readable($file)) {
                        $content = preg_split('#<br />#', preg_replace('/^<code>(.*)<\/code>$/s', '$1', highlight_file($file, true)));

                        $lines = array();
                        for ($i = max($line - 3, 1), $max = min($line + 3, count($content)); $i <= $max; $i++) {
                            $lines[] = '<li' . ($i == $line ? ' class="selected"' : '') . '>' . $content[$i - 1] . '</li>';
                        }

                        return '<ol start="' . max($line - 3, 1) . '">' . implode("\n", $lines) . '</ol>';
                    }
                }

            }
            //echo debug_backtrace();exit;
            /*$fp = fopen("/var/www/ononaru/data/www/logsSave/" . date("d.m.y H:i:s", time()) . "-" . microtime(), "w");
            $traceData = $backtracer;
            $traces = array();
            $format = 'html';
            $lineFormat = 'at <strong>%s%s%s</strong>(%s)<br />in <em>%s</em> line %s <a href="#" onclick="toggle(\'%s\'); return false;">...</a><br /><ul class="code" id="%s" style="display: %s">%s</ul>';
            for ($i = 0, $count = count($traceData); $i < $count; $i++) {
//print_r($traceData[$i]['file']);

                $line = isset($traceData[$i]['line']) ? $traceData[$i]['line'] : null;
                $file = isset($traceData[$i]['file']) ? $traceData[$i]['file'] : null;
                $args = isset($traceData[$i]['args']) ? $traceData[$i]['args'] : array();
                $traces[] = sprintf($lineFormat, (isset($traceData[$i]['class']) ? $traceData[$i]['class'] : ''), (isset($traceData[$i]['type']) ? $traceData[$i]['type'] : ''), $traceData[$i]['function'], formatArgs($args, false, $format), formatFile($file, $line, $format, null === $file ? 'n/a' : $file), null === $line ? 'n/a' : $line, 'trace_' . $i, 'trace_' . $i, $i == 0 ? 'block' : 'none', fileExcerpt($file, $line)
                );
            }
// записываем в файл текст
            //echo $backtracer;
            //  ini_set('memory_limit', '1024M');
            //$ser=__serialize($backtracer);
            $ser = serialize($traces);
            //var_dump($ser);
            fwrite($fp, $ser);

// закрываем
            fclose($fp);*/
            //exit;
        }
        return parent::save($conn);
    }

}
