<?php

/**
 * BaseDopInfo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property integer $dicategory_id
 * @property string $value
 * @property clob $description
 * @property DopInfoCategory $DopInfoCategory
 * @property Doctrine_Collection $DopInfoProducts
 * @property Doctrine_Collection $DopInfoCategoryFullDopInfo
 * @property Doctrine_Collection $Product
 * 
 * @method string              getName()                       Returns the current record's "name" value
 * @method integer             getDicategoryId()               Returns the current record's "dicategory_id" value
 * @method string              getValue()                      Returns the current record's "value" value
 * @method clob                getDescription()                Returns the current record's "description" value
 * @method DopInfoCategory     getDopInfoCategory()            Returns the current record's "DopInfoCategory" value
 * @method Doctrine_Collection getDopInfoProducts()            Returns the current record's "DopInfoProducts" collection
 * @method Doctrine_Collection getDopInfoCategoryFullDopInfo() Returns the current record's "DopInfoCategoryFullDopInfo" collection
 * @method Doctrine_Collection getProduct()                    Returns the current record's "Product" collection
 * @method DopInfo             setName()                       Sets the current record's "name" value
 * @method DopInfo             setDicategoryId()               Sets the current record's "dicategory_id" value
 * @method DopInfo             setValue()                      Sets the current record's "value" value
 * @method DopInfo             setDescription()                Sets the current record's "description" value
 * @method DopInfo             setDopInfoCategory()            Sets the current record's "DopInfoCategory" value
 * @method DopInfo             setDopInfoProducts()            Sets the current record's "DopInfoProducts" collection
 * @method DopInfo             setDopInfoCategoryFullDopInfo() Sets the current record's "DopInfoCategoryFullDopInfo" collection
 * @method DopInfo             setProduct()                    Sets the current record's "Product" collection
 * 
 * @package    test
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDopInfo extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('dop_info');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('dicategory_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('value', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('DopInfoCategory', array(
             'local' => 'dicategory_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('DopInfo as DopInfoProducts', array(
             'refClass' => 'DopInfoProduct',
             'local' => 'dop_info_id',
             'foreign' => 'dop_info_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('DopInfoCategoryFull as DopInfoCategoryFullDopInfo', array(
             'refClass' => 'DopInfoCategoryFullDopInfo',
             'local' => 'dop_info_id',
             'foreign' => 'dop_info_category_full_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Product', array(
             'refClass' => 'DopInfoProduct',
             'local' => 'dop_info_id',
             'foreign' => 'product_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sortable0 = new Doctrine_Template_Sortable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'value',
             ),
             'unique' => false,
             'canUpdate' => false,
             'builder' => 
             array(
              0 => 'SlugifyClass',
              1 => 'Slugify',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($sortable0);
        $this->actAs($sluggable0);
    }
}