<?php

/**
 * BaseCatalog
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $description
 * @property string $canonical
 * @property string $menu_name
 * @property integer $page_id
 * @property boolean $is_public
 * @property string $img
 * @property string $img_top
 * @property string $img_bottom
 * @property integer $maxaction
 * @property clob $page
 * @property string $class
 * @property string $tags
 * @property string $title
 * @property string $keywords
 * @property string $metadescription
 * @property clob $prodid_priority
 * @property clob $prodid_bestprice
 * @property clob $top20_list
 * @property clob $sale_list
 * @property clob $gifts_list
 * @property clob $best_sales_list
 * @property clob $prodid_random
 * @property string $brands_ids
 * @property Page $Page
 * @property Doctrine_Collection $CategoryCatalogs
 * 
 * @method string              getName()             Returns the current record's "name" value
 * @method string              getDescription()      Returns the current record's "description" value
 * @method string              getCanonical()        Returns the current record's "canonical" value
 * @method string              getMenuName()         Returns the current record's "menu_name" value
 * @method integer             getPageId()           Returns the current record's "page_id" value
 * @method boolean             getIsPublic()         Returns the current record's "is_public" value
 * @method string              getImg()              Returns the current record's "img" value
 * @method string              getImgTop()           Returns the current record's "img_top" value
 * @method string              getImgBottom()        Returns the current record's "img_bottom" value
 * @method integer             getMaxaction()        Returns the current record's "maxaction" value
 * @method clob                getPage()             Returns the current record's "page" value
 * @method string              getClass()            Returns the current record's "class" value
 * @method string              getTags()             Returns the current record's "tags" value
 * @method string              getTitle()            Returns the current record's "title" value
 * @method string              getKeywords()         Returns the current record's "keywords" value
 * @method string              getMetadescription()  Returns the current record's "metadescription" value
 * @method clob                getProdidPriority()   Returns the current record's "prodid_priority" value
 * @method clob                getProdidBestprice()  Returns the current record's "prodid_bestprice" value
 * @method clob                getTop20List()        Returns the current record's "top20_list" value
 * @method clob                getSaleList()         Returns the current record's "sale_list" value
 * @method clob                getGiftsList()        Returns the current record's "gifts_list" value
 * @method clob                getBestSalesList()    Returns the current record's "best_sales_list" value
 * @method clob                getProdidRandom()     Returns the current record's "prodid_random" value
 * @method string              getBrandsIds()        Returns the current record's "brands_ids" value
 * @method Page                getPage()             Returns the current record's "Page" value
 * @method Doctrine_Collection getCategoryCatalogs() Returns the current record's "CategoryCatalogs" collection
 * @method Catalog             setName()             Sets the current record's "name" value
 * @method Catalog             setDescription()      Sets the current record's "description" value
 * @method Catalog             setCanonical()        Sets the current record's "canonical" value
 * @method Catalog             setMenuName()         Sets the current record's "menu_name" value
 * @method Catalog             setPageId()           Sets the current record's "page_id" value
 * @method Catalog             setIsPublic()         Sets the current record's "is_public" value
 * @method Catalog             setImg()              Sets the current record's "img" value
 * @method Catalog             setImgTop()           Sets the current record's "img_top" value
 * @method Catalog             setImgBottom()        Sets the current record's "img_bottom" value
 * @method Catalog             setMaxaction()        Sets the current record's "maxaction" value
 * @method Catalog             setPage()             Sets the current record's "page" value
 * @method Catalog             setClass()            Sets the current record's "class" value
 * @method Catalog             setTags()             Sets the current record's "tags" value
 * @method Catalog             setTitle()            Sets the current record's "title" value
 * @method Catalog             setKeywords()         Sets the current record's "keywords" value
 * @method Catalog             setMetadescription()  Sets the current record's "metadescription" value
 * @method Catalog             setProdidPriority()   Sets the current record's "prodid_priority" value
 * @method Catalog             setProdidBestprice()  Sets the current record's "prodid_bestprice" value
 * @method Catalog             setTop20List()        Sets the current record's "top20_list" value
 * @method Catalog             setSaleList()         Sets the current record's "sale_list" value
 * @method Catalog             setGiftsList()        Sets the current record's "gifts_list" value
 * @method Catalog             setBestSalesList()    Sets the current record's "best_sales_list" value
 * @method Catalog             setProdidRandom()     Sets the current record's "prodid_random" value
 * @method Catalog             setBrandsIds()        Sets the current record's "brands_ids" value
 * @method Catalog             setPage()             Sets the current record's "Page" value
 * @method Catalog             setCategoryCatalogs() Sets the current record's "CategoryCatalogs" collection
 * 
 * @package    test
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCatalog extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('catalog');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('canonical', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('menu_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('page_id', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             ));
        $this->hasColumn('is_public', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));
        $this->hasColumn('img', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('img_top', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('img_bottom', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('maxaction', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             ));
        $this->hasColumn('page', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('class', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('tags', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('keywords', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('metadescription', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('prodid_priority', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('prodid_bestprice', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('top20_list', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('sale_list', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('gifts_list', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('best_sales_list', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('prodid_random', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('brands_ids', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Page', array(
             'local' => 'page_id',
             'foreign' => 'id'));

        $this->hasMany('Category as CategoryCatalogs', array(
             'refClass' => 'CategoryCatalog',
             'local' => 'catalog_id',
             'foreign' => 'category_id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sortable0 = new Doctrine_Template_Sortable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'name',
             ),
             'unique' => true,
             'canUpdate' => false,
             'builder' => 
             array(
              0 => 'SlugifyClass',
              1 => 'Slugify',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($sortable0);
        $this->actAs($sluggable0);
    }
}