<?php

/**
 * BaseRussianPostCity
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $slug
 * @property string $sitemapRate
 * @property clob $content
 * @property clob $content_mobile
 * @property clob $content_mo
 * @property clob $content_mo_mobile
 * @property boolean $is_public
 * @property boolean $is_show_right_block
 * @property string $title
 * @property string $keywords
 * @property string $description
 * @property string $tags
 * @property string $city
 * 
 * @method string          getName()                Returns the current record's "name" value
 * @method string          getSlug()                Returns the current record's "slug" value
 * @method string          getSitemapRate()         Returns the current record's "sitemapRate" value
 * @method clob            getContent()             Returns the current record's "content" value
 * @method clob            getContentMobile()       Returns the current record's "content_mobile" value
 * @method clob            getContentMo()           Returns the current record's "content_mo" value
 * @method clob            getContentMoMobile()     Returns the current record's "content_mo_mobile" value
 * @method boolean         getIsPublic()            Returns the current record's "is_public" value
 * @method boolean         getIsShowRightBlock()    Returns the current record's "is_show_right_block" value
 * @method string          getTitle()               Returns the current record's "title" value
 * @method string          getKeywords()            Returns the current record's "keywords" value
 * @method string          getDescription()         Returns the current record's "description" value
 * @method string          getTags()                Returns the current record's "tags" value
 * @method string          getCity()                Returns the current record's "city" value
 * @method RussianPostCity setName()                Sets the current record's "name" value
 * @method RussianPostCity setSlug()                Sets the current record's "slug" value
 * @method RussianPostCity setSitemapRate()         Sets the current record's "sitemapRate" value
 * @method RussianPostCity setContent()             Sets the current record's "content" value
 * @method RussianPostCity setContentMobile()       Sets the current record's "content_mobile" value
 * @method RussianPostCity setContentMo()           Sets the current record's "content_mo" value
 * @method RussianPostCity setContentMoMobile()     Sets the current record's "content_mo_mobile" value
 * @method RussianPostCity setIsPublic()            Sets the current record's "is_public" value
 * @method RussianPostCity setIsShowRightBlock()    Sets the current record's "is_show_right_block" value
 * @method RussianPostCity setTitle()               Sets the current record's "title" value
 * @method RussianPostCity setKeywords()            Sets the current record's "keywords" value
 * @method RussianPostCity setDescription()         Sets the current record's "description" value
 * @method RussianPostCity setTags()                Sets the current record's "tags" value
 * @method RussianPostCity setCity()                Sets the current record's "city" value
 * 
 * @package    test
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRussianPostCity extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('russian_post_city');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('slug', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('sitemapRate', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('content', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('content_mobile', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('content_mo', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('content_mo_mobile', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('is_public', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('is_show_right_block', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('keywords', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('tags', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('city', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'name',
             ),
             'unique' => true,
             'canUpdate' => false,
             'builder' => 
             array(
              0 => 'SlugifyClass',
              1 => 'Slugify',
             ),
             ));
        $sortable0 = new Doctrine_Template_Sortable();
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
        $this->actAs($sortable0);
    }
}