<?php

/**
 * BasePage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $slug
 * @property string $sitemapRate
 * @property clob $content
 * @property clob $content_mobile
 * @property clob $content_mo
 * @property clob $content_mo_mobile
 * @property clob $content_new_version
 * @property boolean $is_public
 * @property boolean $is_show_right_block
 * @property string $title
 * @property string $keywords
 * @property string $description
 * @property string $tags
 * @property string $class
 * @property integer $city_id
 * @property integer $views_count
 * @property City $City
 * @property Doctrine_Collection $Catalog
 * @property Doctrine_Collection $Categorypage
 * @property Doctrine_Collection $CategorypagePages
 * @property Doctrine_Collection $Page
 * @property Doctrine_Collection $News
 * @property Doctrine_Collection $NewsPages
 * @property Doctrine_Collection $Shops
 * 
 * @method string              getName()                Returns the current record's "name" value
 * @method string              getSlug()                Returns the current record's "slug" value
 * @method string              getSitemapRate()         Returns the current record's "sitemapRate" value
 * @method clob                getContent()             Returns the current record's "content" value
 * @method clob                getContentMobile()       Returns the current record's "content_mobile" value
 * @method clob                getContentMo()           Returns the current record's "content_mo" value
 * @method clob                getContentMoMobile()     Returns the current record's "content_mo_mobile" value
 * @method clob                getContentNewVersion()   Returns the current record's "content_new_version" value
 * @method boolean             getIsPublic()            Returns the current record's "is_public" value
 * @method boolean             getIsShowRightBlock()    Returns the current record's "is_show_right_block" value
 * @method string              getTitle()               Returns the current record's "title" value
 * @method string              getKeywords()            Returns the current record's "keywords" value
 * @method string              getDescription()         Returns the current record's "description" value
 * @method string              getTags()                Returns the current record's "tags" value
 * @method string              getClass()               Returns the current record's "class" value
 * @method integer             getCityId()              Returns the current record's "city_id" value
 * @method integer             getViewsCount()          Returns the current record's "views_count" value
 * @method City                getCity()                Returns the current record's "City" value
 * @method Doctrine_Collection getCatalog()             Returns the current record's "Catalog" collection
 * @method Doctrine_Collection getCategorypage()        Returns the current record's "Categorypage" collection
 * @method Doctrine_Collection getCategorypagePages()   Returns the current record's "CategorypagePages" collection
 * @method Doctrine_Collection getPage()                Returns the current record's "Page" collection
 * @method Doctrine_Collection getNews()                Returns the current record's "News" collection
 * @method Doctrine_Collection getNewsPages()           Returns the current record's "NewsPages" collection
 * @method Doctrine_Collection getShops()               Returns the current record's "Shops" collection
 * @method Page                setName()                Sets the current record's "name" value
 * @method Page                setSlug()                Sets the current record's "slug" value
 * @method Page                setSitemapRate()         Sets the current record's "sitemapRate" value
 * @method Page                setContent()             Sets the current record's "content" value
 * @method Page                setContentMobile()       Sets the current record's "content_mobile" value
 * @method Page                setContentMo()           Sets the current record's "content_mo" value
 * @method Page                setContentMoMobile()     Sets the current record's "content_mo_mobile" value
 * @method Page                setContentNewVersion()   Sets the current record's "content_new_version" value
 * @method Page                setIsPublic()            Sets the current record's "is_public" value
 * @method Page                setIsShowRightBlock()    Sets the current record's "is_show_right_block" value
 * @method Page                setTitle()               Sets the current record's "title" value
 * @method Page                setKeywords()            Sets the current record's "keywords" value
 * @method Page                setDescription()         Sets the current record's "description" value
 * @method Page                setTags()                Sets the current record's "tags" value
 * @method Page                setClass()               Sets the current record's "class" value
 * @method Page                setCityId()              Sets the current record's "city_id" value
 * @method Page                setViewsCount()          Sets the current record's "views_count" value
 * @method Page                setCity()                Sets the current record's "City" value
 * @method Page                setCatalog()             Sets the current record's "Catalog" collection
 * @method Page                setCategorypage()        Sets the current record's "Categorypage" collection
 * @method Page                setCategorypagePages()   Sets the current record's "CategorypagePages" collection
 * @method Page                setPage()                Sets the current record's "Page" collection
 * @method Page                setNews()                Sets the current record's "News" collection
 * @method Page                setNewsPages()           Sets the current record's "NewsPages" collection
 * @method Page                setShops()               Sets the current record's "Shops" collection
 * 
 * @package    test
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePage extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('page');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('slug', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('sitemapRate', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('content', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('content_mobile', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('content_mo', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('content_mo_mobile', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('content_new_version', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('is_public', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('is_show_right_block', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('keywords', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('tags', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('class', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('city_id', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             ));
        $this->hasColumn('views_count', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('City', array(
             'local' => 'city_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Catalog', array(
             'local' => 'id',
             'foreign' => 'page_id'));

        $this->hasMany('Categorypage', array(
             'refClass' => 'CategorypagePage',
             'local' => 'page_id',
             'foreign' => 'categorypage_id'));

        $this->hasMany('CategorypagePage as CategorypagePages', array(
             'local' => 'id',
             'foreign' => 'page_id'));

        $this->hasMany('Comments as Page', array(
             'local' => 'id',
             'foreign' => 'page_id'));

        $this->hasMany('News', array(
             'refClass' => 'NewsPage',
             'local' => 'page_id',
             'foreign' => 'news_id'));

        $this->hasMany('NewsPage as NewsPages', array(
             'local' => 'id',
             'foreign' => 'page_id'));

        $this->hasMany('Shops', array(
             'local' => 'id',
             'foreign' => 'page_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'name',
             ),
             'unique' => true,
             'canUpdate' => false,
             'builder' => 
             array(
              0 => 'SlugifyClass',
              1 => 'Slugify',
             ),
             ));
        $sortable0 = new Doctrine_Template_Sortable();
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
        $this->actAs($sortable0);
    }
}